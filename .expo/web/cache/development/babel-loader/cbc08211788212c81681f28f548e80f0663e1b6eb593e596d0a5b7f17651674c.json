{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nvar _ref, _ref3, _ref5, _ref7, _ref9;\nimport * as SQLite from 'expo-sqlite';\nvar db = SQLite.openDatabase('Mobile.db');\nvar createTableUser = function createTableUser() {\n  return (_ref = _ref || _asyncToGenerator(function* () {\n    return new Promise(function (resolve, reject) {\n      var _ref2;\n      db.transaction(function (_x) {\n        return (_ref2 = _ref2 || _asyncToGenerator(function* (tx) {\n          tx.executeSql(`CREATE TABLE IF NOT EXISTS users (\n                        id INTEGER PRIMARY KEY NOT NULL,\n                        name TEXT DEFAULT 'abc abc',\n                        age INTEGER DEFAULT 18,\n                        email TEXT NOT NULL,\n                        password TEXT NOT NULL,\n                        isSale INTEGER DEFAULT 0 NOT NULL,\n                        address TEXT NOT NULL DEFAULT 'Cau Giay, Ha Noi'\n                    );`, [], function (_, result) {\n            resolve(result);\n          }, function (_, error) {\n            console.error('Error creating database:', error);\n            reject(error);\n          });\n        })).apply(this, arguments);\n      });\n    });\n  })).apply(this, arguments);\n};\nvar insertUser = function insertUser(_x2, _x3, _x4) {\n  return (_ref3 = _ref3 || _asyncToGenerator(function* (email, password, isSelected) {\n    return new Promise(function (resolve, reject) {\n      var _ref4;\n      db.transaction(function (_x5) {\n        return (_ref4 = _ref4 || _asyncToGenerator(function* (tx) {\n          tx.executeSql('INSERT INTO users (email, password, isSale) VALUES (?, ?, ?)', [email, password, isSelected], function (_, result) {\n            if (result.rowsAffected > 0) {\n              resolve(result);\n            } else {\n              reject(new Error('User not inserted'));\n            }\n          }, function (_, error) {\n            console.error('Error inserting user:', error);\n            reject(error);\n          });\n        })).apply(this, arguments);\n      });\n    });\n  })).apply(this, arguments);\n};\nvar updateUser = function updateUser(_x6, _x7, _x8, _x9, _x10, _x11, _x12) {\n  return (_ref5 = _ref5 || _asyncToGenerator(function* (id, name, age, email, password, isSale, address) {\n    return new Promise(function (resolve, reject) {\n      var _ref6;\n      db.transaction(function (_x13) {\n        return (_ref6 = _ref6 || _asyncToGenerator(function* (tx) {\n          tx.executeSql(`UPDATE users SET name = ?, age = ?, email = ?, password = ?, isSale = ?, address = ? WHERE id = ?`, [name, age, email, password, isSale, address, id], function (_, result) {\n            resolve(result);\n          }, function (_, error) {\n            console.error('Error updating user:', error);\n            reject(error);\n          });\n        })).apply(this, arguments);\n      });\n    });\n  })).apply(this, arguments);\n};\nvar getUser = function getUser(_x14, _x15) {\n  return (_ref7 = _ref7 || _asyncToGenerator(function* (email, password) {\n    return new Promise(function (resolve, reject) {\n      var _ref8;\n      db.transaction(function (_x16) {\n        return (_ref8 = _ref8 || _asyncToGenerator(function* (tx) {\n          tx.executeSql('SELECT * FROM users WHERE email = ? AND password = ?', [email, password], function (_, result) {\n            if (result.rows.length > 0) {\n              var user = result.rows.item(0);\n              resolve(user);\n            } else {\n              reject(new Error('User not found'));\n            }\n          }, function (_, error) {\n            console.error('Error querying user:', error);\n            reject(error);\n          });\n        })).apply(this, arguments);\n      });\n    });\n  })).apply(this, arguments);\n};\nvar dropTableUser = function dropTableUser() {\n  return (_ref9 = _ref9 || _asyncToGenerator(function* () {\n    return new Promise(function (resolve, reject) {\n      var _ref10;\n      db.transaction(function (_x17) {\n        return (_ref10 = _ref10 || _asyncToGenerator(function* (tx) {\n          tx.executeSql(`DROP TABLE users`, [], function (_, result) {\n            resolve(result);\n          }, function (_, error) {\n            console.error('Error dropping table:', error);\n            reject(error);\n          });\n        })).apply(this, arguments);\n      });\n    });\n  })).apply(this, arguments);\n};\nexport { createTableUser, insertUser, updateUser, getUser, dropTableUser };","map":{"version":3,"names":["SQLite","db","openDatabase","createTableUser","_ref","_asyncToGenerator","Promise","resolve","reject","_ref2","transaction","_x","tx","executeSql","_","result","error","console","apply","arguments","insertUser","_x2","_x3","_x4","_ref3","email","password","isSelected","_ref4","_x5","rowsAffected","Error","updateUser","_x6","_x7","_x8","_x9","_x10","_x11","_x12","_ref5","id","name","age","isSale","address","_ref6","_x13","getUser","_x14","_x15","_ref7","_ref8","_x16","rows","length","user","item","dropTableUser","_ref9","_ref10","_x17"],"sources":["D:/UET - Đặng Trí Nhân - 21020371/Năm 3/Kì 1/Mobile/mobile/E-Commerce-Mobile-App/src/db/user.js"],"sourcesContent":["import * as SQLite from 'expo-sqlite';\r\n\r\nconst db = SQLite.openDatabase('Mobile.db');\r\n\r\nconst createTableUser = async () => {\r\n    return new Promise((resolve, reject) => {\r\n        db.transaction(\r\n            async (tx) => {\r\n                tx.executeSql(\r\n                    `CREATE TABLE IF NOT EXISTS users (\r\n                        id INTEGER PRIMARY KEY NOT NULL,\r\n                        name TEXT DEFAULT 'abc abc',\r\n                        age INTEGER DEFAULT 18,\r\n                        email TEXT NOT NULL,\r\n                        password TEXT NOT NULL,\r\n                        isSale INTEGER DEFAULT 0 NOT NULL,\r\n                        address TEXT NOT NULL DEFAULT 'Cau Giay, Ha Noi'\r\n                    );`,\r\n                    [],\r\n                    (_, result) => {\r\n                        resolve(result);\r\n                    },\r\n                    (_, error) => {\r\n                        console.error('Error creating database:', error);\r\n                        reject(error);\r\n                    }\r\n                );\r\n            }\r\n        );\r\n    });\r\n};\r\n\r\nconst insertUser = async (email, password, isSelected) => {\r\n    return new Promise((resolve, reject) => {\r\n        db.transaction(\r\n            async (tx) => {\r\n                tx.executeSql(\r\n                    'INSERT INTO users (email, password, isSale) VALUES (?, ?, ?)',\r\n                    [email, password, isSelected],\r\n                    (_, result) => {\r\n                        if (result.rowsAffected > 0) {\r\n                            resolve(result);\r\n                        } else {\r\n                            reject(new Error('User not inserted'));\r\n                        }\r\n                    },\r\n                    (_, error) => {\r\n                        console.error('Error inserting user:', error);\r\n                        reject(error);\r\n                    }\r\n                );\r\n            }\r\n        );\r\n    });\r\n};\r\n\r\nconst updateUser = async (id, name, age, email, password, isSale, address) => {\r\n    return new Promise((resolve, reject) => {\r\n        db.transaction(\r\n            async (tx) => {\r\n                tx.executeSql(\r\n                    `UPDATE users SET name = ?, age = ?, email = ?, password = ?, isSale = ?, address = ? WHERE id = ?`,\r\n                    [name, age, email, password, isSale, address, id],\r\n                    (_, result) => {\r\n                        resolve(result);\r\n                    },\r\n                    (_, error) => {\r\n                        console.error('Error updating user:', error);\r\n                        reject(error);\r\n                    }\r\n                );\r\n            }\r\n        );\r\n    });\r\n};\r\n\r\nconst getUser = async (email, password) => {\r\n    return new Promise((resolve, reject) => {\r\n        db.transaction(\r\n            async (tx) => {\r\n                tx.executeSql(\r\n                    'SELECT * FROM users WHERE email = ? AND password = ?',\r\n                    [email, password],\r\n                    (_, result) => {\r\n                        if (result.rows.length > 0) {\r\n                            const user = result.rows.item(0);\r\n                            resolve(user);\r\n                        } else {\r\n                            reject(new Error('User not found'));\r\n                        }\r\n                    },\r\n                    (_, error) => {\r\n                        console.error('Error querying user:', error);\r\n                        reject(error);\r\n                    }\r\n                );\r\n            }\r\n        );\r\n    });\r\n};\r\n\r\nconst dropTableUser = async () => {\r\n    return new Promise((resolve, reject) => {\r\n        db.transaction(\r\n            async (tx) => {\r\n                tx.executeSql(\r\n                    `DROP TABLE users`,\r\n                    [],\r\n                    (_, result) => {\r\n                        resolve(result);\r\n                    },\r\n                    (_, error) => {\r\n                        console.error('Error dropping table:', error);\r\n                        reject(error);\r\n                    }\r\n                );\r\n            }\r\n        );\r\n    });\r\n};\r\n\r\nexport { createTableUser, insertUser, updateUser, getUser, dropTableUser };"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}