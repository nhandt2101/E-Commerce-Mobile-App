{"ast":null,"code":"import * as SQLite from 'expo-sqlite';\nvar db = SQLite.openDatabase('Mobile.db');\nvar createTableCart = function createTableCart() {\n  return new Promise(function (resolve, reject) {\n    db.transaction(function (tx) {\n      tx.executeSql(`CREATE TABLE IF NOT EXISTS cart (\n          id INTEGER PRIMARY KEY NOT NULL,\n          link_img TEXT NOT NULL,\n          name TEXT DEFAULT 'Product name',\n          sale_id INTEGER NOT NULL,\n          user_id INTEGER NOT NULL,\n          price REAL NOT NULL DEFAULT 10.0,\n          describe TEXT DEFAULT 'abc abc abc',\n          quantity INTEGER NOT NULL,\n          createAt DATETIME DEFAULT CURRENT_TIMESTAMP,\n          FOREIGN KEY (sale_id) REFERENCES users(id),\n          FOREIGN KEY (user_id) REFERENCES users(id)\n        );`, [], function (_, result) {\n        resolve();\n      }, function (_, error) {\n        console.error('Error creating database:', error);\n        reject(error);\n      });\n    });\n  });\n};\nvar insertCart = function insertCart(name, price, describe, link_img, quantity, sale_id, user_id) {\n  return new Promise(function (resolve, reject) {\n    db.transaction(function (tx) {\n      tx.executeSql('INSERT INTO cart (name, price, describe, link_img, quantity, sale_id, user_id) VALUES (?, ?, ?, ?, ?, ?, ?)', [name, price, describe, link_img, quantity, sale_id, user_id], function (_, result) {\n        if (result.rowsAffected > 0) {\n          resolve(result);\n        } else {\n          reject(new Error('Insertion failed'));\n        }\n      }, function (_, error) {\n        console.error('Error inserting user:', error);\n        reject(error);\n      });\n    });\n  });\n};\nvar getCart = function getCart(input) {\n  return new Promise(function (resolve, reject) {\n    db.transaction(function (tx) {\n      tx.executeSql('SELECT * FROM cart WHERE user_id = ?', [input], function (_, result) {\n        if (result.rows.length > 0) {\n          var products = [];\n          for (var i = 0; i < result.rows.length; i++) {\n            var productData = result.rows.item(i);\n            products.push({\n              id: productData.id,\n              productName: productData.name,\n              describe: productData.describe,\n              link_img: productData.link_img,\n              price: productData.price,\n              sale_id: productData.sale_id,\n              quantity: productData.quantity,\n              isSelect: false,\n              createAt: productData.createAt\n            });\n          }\n          resolve(products);\n        } else {\n          reject(new Error('No products found.'));\n        }\n      }, function (_, error) {\n        console.error('Error querying products:', error);\n        reject(error);\n      });\n    });\n  });\n};\nvar deleteCart = function deleteCart(id) {\n  return new Promise(function (resolve, reject) {\n    db.transaction(function (tx) {\n      tx.executeSql('DELETE FROM cart WHERE id = ?', [id], function (_, result) {\n        if (result.rowsAffected > 0) {\n          resolve(result);\n        } else {\n          reject(new Error('Insertion failed'));\n        }\n      }, function (_, error) {\n        console.error('Error inserting user:', error);\n        reject(error);\n      });\n    });\n  });\n};\nvar dropTableCart = function dropTableCart() {\n  return new Promise(function (resolve, reject) {\n    db.transaction(function (tx) {\n      tx.executeSql(`DROP TABLE cart`, [], function (_, result) {\n        resolve(true);\n      }, function (_, error) {\n        console.error('Error creating database:', error);\n        reject(error);\n      });\n    });\n  });\n};\nexport { createTableCart, insertCart, getCart, deleteCart, dropTableCart };","map":{"version":3,"names":["SQLite","db","openDatabase","createTableCart","Promise","resolve","reject","transaction","tx","executeSql","_","result","error","console","insertCart","name","price","describe","link_img","quantity","sale_id","user_id","rowsAffected","Error","getCart","input","rows","length","products","i","productData","item","push","id","productName","isSelect","createAt","deleteCart","dropTableCart"],"sources":["D:/UET - Đặng Trí Nhân - 21020371/Năm 3/Kì 1/Mobile/mobile/E-Commerce-Mobile-App/src/db/cart.js"],"sourcesContent":["import * as SQLite from 'expo-sqlite';\r\n\r\nconst db = SQLite.openDatabase('Mobile.db');\r\n\r\nconst createTableCart = () => {\r\n  return new Promise((resolve, reject) => {\r\n    db.transaction((tx) => {\r\n      tx.executeSql(\r\n        `CREATE TABLE IF NOT EXISTS cart (\r\n          id INTEGER PRIMARY KEY NOT NULL,\r\n          link_img TEXT NOT NULL,\r\n          name TEXT DEFAULT 'Product name',\r\n          sale_id INTEGER NOT NULL,\r\n          user_id INTEGER NOT NULL,\r\n          price REAL NOT NULL DEFAULT 10.0,\r\n          describe TEXT DEFAULT 'abc abc abc',\r\n          quantity INTEGER NOT NULL,\r\n          createAt DATETIME DEFAULT CURRENT_TIMESTAMP,\r\n          FOREIGN KEY (sale_id) REFERENCES users(id),\r\n          FOREIGN KEY (user_id) REFERENCES users(id)\r\n        );`,\r\n        [],\r\n        (_, result) => {\r\n          // TODO\r\n          resolve();\r\n        },\r\n        (_, error) => {\r\n          console.error('Error creating database:', error);\r\n          // TODO\r\n          reject(error);\r\n        }\r\n      );\r\n    });\r\n  });\r\n};\r\n\r\n\r\nconst insertCart = (name, price, describe, link_img, quantity, sale_id, user_id) => {\r\n  return new Promise((resolve, reject) => {\r\n    db.transaction((tx) => {\r\n      tx.executeSql(\r\n        'INSERT INTO cart (name, price, describe, link_img, quantity, sale_id, user_id) VALUES (?, ?, ?, ?, ?, ?, ?)',\r\n        [name, price, describe, link_img, quantity, sale_id, user_id],\r\n        (_, result) => {\r\n          if (result.rowsAffected > 0) {\r\n            resolve(result);\r\n          } else {\r\n            reject(new Error('Insertion failed'));\r\n          }\r\n        },\r\n        (_, error) => {\r\n          console.error('Error inserting user:', error);\r\n          reject(error);\r\n        }\r\n      );\r\n    });\r\n  });\r\n};\r\n\r\nconst getCart = (input) => {\r\n  return new Promise((resolve, reject) => {\r\n    db.transaction((tx) => {\r\n      tx.executeSql(\r\n        'SELECT * FROM cart WHERE user_id = ?',\r\n        [input],\r\n        (_, result) => {\r\n          if (result.rows.length > 0) {\r\n            const products = [];\r\n            for (let i = 0; i < result.rows.length; i++) {\r\n              const productData = result.rows.item(i);\r\n              products.push({\r\n                id: productData.id,\r\n                productName: productData.name,\r\n                describe: productData.describe,\r\n                link_img: productData.link_img,\r\n                price: productData.price,\r\n                sale_id: productData.sale_id,\r\n                quantity: productData.quantity,\r\n                isSelect: false,\r\n                createAt: productData.createAt,\r\n              });\r\n            }\r\n            resolve(products);\r\n          } else {\r\n            reject(new Error('No products found.'));\r\n          }\r\n        },\r\n        (_, error) => {\r\n          console.error('Error querying products:', error);\r\n          reject(error);\r\n        }\r\n      );\r\n    });\r\n  });\r\n};\r\n\r\nconst deleteCart = (id) => {\r\n  return new Promise((resolve, reject) => {\r\n    db.transaction((tx) => {\r\n      tx.executeSql(\r\n        'DELETE FROM cart WHERE id = ?',\r\n        [id],\r\n        (_, result) => {\r\n          if (result.rowsAffected > 0) {\r\n            resolve(result);\r\n          } else {\r\n            reject(new Error('Insertion failed'));\r\n          }\r\n        },\r\n        (_, error) => {\r\n          console.error('Error inserting user:', error);\r\n          reject(error);\r\n        }\r\n      );\r\n    });\r\n  });\r\n};\r\n\r\nconst dropTableCart = () => {\r\n  return new Promise((resolve, reject) => {\r\n    db.transaction((tx) => {\r\n      tx.executeSql(\r\n        `DROP TABLE cart`,\r\n        [],\r\n        (_, result) => {\r\n          // TODO\r\n          resolve(true);\r\n        },\r\n        (_, error) => {\r\n          console.error('Error creating database:', error);\r\n          // TODO\r\n          reject(error);\r\n        }\r\n      );\r\n    });\r\n  });\r\n};\r\n\r\nexport { createTableCart, insertCart, getCart, deleteCart, dropTableCart };"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}