{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport * as SQLite from 'expo-sqlite';\nvar unidecode = require('unidecode');\nvar db = SQLite.openDatabase('Mobile.db');\nvar createTableProduct = function createTableProduct() {\n  return new Promise(function (resolve, reject) {\n    db.transaction(function (tx) {\n      tx.executeSql(`CREATE TABLE IF NOT EXISTS products (\n          id INTEGER PRIMARY KEY NOT NULL,\n          link_img TEXT NOT NULL,\n          name TEXT DEFAULT 'Product name',\n          sale_id INT NOT NULL,\n          price DOUBLE NOT NULL DEFAULT 10.0,\n          describe TEXT DEFAULT 'abc abc abc',\n          FOREIGN KEY(sale_id) REFERENCES users(id)\n        );\n        CREATE INDEX IF NOT EXISTS idx_name ON products(name);\n        CREATE INDEX IF NOT EXISTS idx_describe ON products(describe);\n        `, [], function (_, result) {\n        resolve();\n      }, function (_, error) {\n        console.error('Error creating database:', error);\n        reject(error);\n      });\n    });\n  });\n};\nvar insertProduct = function insertProduct(name, price, describe, link_img, sale_id) {\n  return new Promise(function (resolve, reject) {\n    db.transaction(function (tx) {\n      tx.executeSql('INSERT INTO products (name, price, describe, link_img, sale_id) VALUES (?, ?, ?, ?, ?)', [name, price, describe, link_img, sale_id], function (_, result) {\n        if (result.rowsAffected > 0) {\n          resolve();\n        } else {\n          reject(new Error('Insertion failed'));\n        }\n      }, function (_, error) {\n        console.error('Error inserting user:', error);\n        reject(error);\n      });\n    });\n  });\n};\nvar getAllProduct = function getAllProduct() {\n  return new Promise(function (resolve, reject) {\n    db.transaction(function (tx) {\n      tx.executeSql('SELECT * FROM products', [], function (_, result) {\n        if (result.rows.length > 0) {\n          var products = [];\n          for (var i = 0; i < result.rows.length; i++) {\n            var productData = result.rows.item(i);\n            products.push({\n              id: productData.id,\n              productName: productData.name,\n              describe: productData.describe,\n              link_img: productData.link_img,\n              price: productData.price,\n              sale_id: productData.sale_id\n            });\n          }\n          resolve(products);\n        } else {\n          reject(new Error('No products found.'));\n        }\n      }, function (_, error) {\n        console.error('Error querying products:', error);\n        reject(error);\n      });\n    });\n  });\n};\nvar findProductTrue = function findProductTrue(input) {\n  return new Promise(function (resolve, reject) {\n    db.transaction(function (tx) {\n      tx.executeSql('SELECT * FROM products WHERE name LIKE ? OR describe LIKE ?', [`%${input}%`, `%${input}%`], function (_, result) {\n        if (result.rows.length > 0) {\n          var products = [];\n          for (var i = 0; i < result.rows.length; i++) {\n            var productData = result.rows.item(i);\n            products.push({\n              id: productData.id,\n              productName: productData.name,\n              describe: productData.describe,\n              link_img: productData.link_img,\n              price: productData.price,\n              sale_id: productData.sale_id\n            });\n          }\n          resolve(products);\n        } else {\n          reject(new Error('No products found.'));\n        }\n      }, function (_, error) {\n        console.error('Error querying products:', error);\n        reject(error);\n      });\n    });\n  });\n};\nfunction preprocessVietnameseText(text) {\n  var unidecodedText = unidecode(text);\n  return unidecodedText.toLowerCase();\n}\nfunction levenshtein(s1, s2) {\n  var s1_len = s1.length;\n  var s2_len = s2.length;\n  var i, j, c, c_temp, cost;\n  var s1_char;\n  var cv0 = new Array(s2_len + 1);\n  var cv1 = new Array(s2_len + 1);\n  for (var k = 0; k <= s2_len; k++) {\n    cv0[k] = k;\n    cv1[k] = 0;\n  }\n  if (s1 === s2) {\n    return 0;\n  } else if (s1_len === 0) {\n    return s2_len;\n  } else if (s2_len === 0) {\n    return s1_len;\n  } else {\n    for (i = 0; i < s1_len; i++) {\n      s1_char = s1.charAt(i);\n      c = i;\n      cv0[0] = i + 1;\n      for (j = 0; j < s2_len; j++) {\n        cost = s1_char === s2.charAt(j) ? 0 : 1;\n        c_temp = cv1[j] + cost;\n        if (c > c_temp) {\n          c = c_temp;\n        }\n        c_temp = cv1[j + 1] + 1;\n        if (c > c_temp) {\n          c = c_temp;\n        }\n        cv0[j + 1] = c;\n      }\n      for (j = 0; j <= s2_len; j++) {\n        cv1[j] = cv0[j];\n      }\n    }\n  }\n  return c;\n}\nvar findProduct = function findProduct(input, maxDistance) {\n  return new Promise(function (resolve, reject) {\n    db.transaction(function (tx) {\n      tx.executeSql('SELECT * FROM products', [], function (_, result) {\n        if (result.rows.length > 0) {\n          if (input.length == 0) {\n            resolve(result);\n          }\n          var closestProducts = [];\n          input = preprocessVietnameseText(input);\n          for (var i = 0; i < result.rows.length; i++) {\n            var productData = result.rows.item(i);\n            var productName = preprocessVietnameseText(productData.name);\n            var productDescription = preprocessVietnameseText(productData.describe);\n            var distance = Math.min(levenshtein(input, productName), levenshtein(input, productDescription));\n            distance = Math.min(distance, levenshtein(input, productName + productDescription));\n            if (distance < maxDistance) {\n              closestProducts.push({\n                id: productData.id,\n                productName: productData.name,\n                describe: productData.describe,\n                link_img: productData.link_img,\n                price: productData.price,\n                sale_id: productData.sale_id,\n                distance: distance\n              });\n            }\n          }\n          closestProducts.sort(function (a, b) {\n            return a.distance - b.distance;\n          });\n          resolve(closestProducts.slice(0, 10));\n        } else {\n          reject(new Error('No products found.'));\n        }\n      }, function (_, error) {\n        console.error('Error querying products:', error);\n        reject(error);\n      });\n    });\n  });\n};\nvar findProductCombined = function findProductCombined(input) {\n  var findProductTruePromise = findProductTrue(input).catch(function () {\n    return null;\n  });\n  var findProductPromise = findProduct(input, 5).catch(function () {\n    return [];\n  });\n  return Promise.all([findProductTruePromise, findProductPromise]).then(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n      trueProduct = _ref2[0],\n      similarProducts = _ref2[1];\n    if (trueProduct) {\n      return trueProduct;\n    } else {\n      return similarProducts.slice(0, 10);\n    }\n  });\n};\nvar getBySale = function getBySale(input) {\n  return new Promise(function (resolve, reject) {\n    db.transaction(function (tx) {\n      tx.executeSql('SELECT * FROM products WHERE sale_id = ?', [input], function (_, result) {\n        if (result.rows.length > 0) {\n          var products = [];\n          for (var i = 0; i < result.rows.length; i++) {\n            var productData = result.rows.item(i);\n            products.push({\n              id: productData.id,\n              productName: productData.name,\n              describe: productData.describe,\n              link_img: productData.link_img,\n              price: productData.price,\n              sale_id: productData.sale_id\n            });\n          }\n          resolve(products);\n        } else {\n          resolve([]);\n        }\n      }, function (_, error) {\n        console.error('Error querying products:', error);\n        reject(error);\n      });\n    });\n  });\n};\nvar deleteProduct = function deleteProduct(input) {\n  return new Promise(function (resolve, reject) {\n    db.transaction(function (tx) {\n      tx.executeSql('SELECT * FROM products WHERE id = ?', [input], function (_, result) {\n        resolve();\n      }, function (_, error) {\n        console.error('Error creating database:', error);\n        reject(error);\n      });\n    });\n  });\n};\nvar dropTableProduct = function dropTableProduct() {\n  return new Promise(function (resolve, reject) {\n    db.transaction(function (tx) {\n      tx.executeSql(`DROP TABLE products`, [], function (_, result) {\n        resolve(true);\n      }, function (_, error) {\n        console.error('Error creating database:', error);\n        reject(error);\n      });\n    });\n  });\n};\nexport { createTableProduct, insertProduct, getAllProduct, findProductTrue, findProduct, findProductCombined, getBySale, deleteProduct, dropTableProduct };","map":{"version":3,"names":["SQLite","unidecode","require","db","openDatabase","createTableProduct","Promise","resolve","reject","transaction","tx","executeSql","_","result","error","console","insertProduct","name","price","describe","link_img","sale_id","rowsAffected","Error","getAllProduct","rows","length","products","i","productData","item","push","id","productName","findProductTrue","input","preprocessVietnameseText","text","unidecodedText","toLowerCase","levenshtein","s1","s2","s1_len","s2_len","j","c","c_temp","cost","s1_char","cv0","Array","cv1","k","charAt","findProduct","maxDistance","closestProducts","productDescription","distance","Math","min","sort","a","b","slice","findProductCombined","findProductTruePromise","catch","findProductPromise","all","then","_ref","_ref2","_slicedToArray","trueProduct","similarProducts","getBySale","deleteProduct","dropTableProduct"],"sources":["D:/UET - Đặng Trí Nhân - 21020371/Năm 3/Kì 1/Mobile/mobile/E-Commerce-Mobile-App/src/db/product.js"],"sourcesContent":["import * as SQLite from 'expo-sqlite';\r\nconst unidecode = require('unidecode');\r\n\r\nconst db = SQLite.openDatabase('Mobile.db');\r\n\r\nconst createTableProduct = () => {\r\n  return new Promise((resolve, reject) => {\r\n    db.transaction((tx) => {\r\n      tx.executeSql(\r\n        `CREATE TABLE IF NOT EXISTS products (\r\n          id INTEGER PRIMARY KEY NOT NULL,\r\n          link_img TEXT NOT NULL,\r\n          name TEXT DEFAULT 'Product name',\r\n          sale_id INT NOT NULL,\r\n          price DOUBLE NOT NULL DEFAULT 10.0,\r\n          describe TEXT DEFAULT 'abc abc abc',\r\n          FOREIGN KEY(sale_id) REFERENCES users(id)\r\n        );\r\n        CREATE INDEX IF NOT EXISTS idx_name ON products(name);\r\n        CREATE INDEX IF NOT EXISTS idx_describe ON products(describe);\r\n        `,\r\n        [],\r\n        (_, result) => {\r\n          // TODO\r\n          resolve();\r\n        },\r\n        (_, error) => {\r\n          console.error('Error creating database:', error);\r\n          // TODO\r\n          reject(error);\r\n        }\r\n      );\r\n    });\r\n  });\r\n};\r\n\r\nconst insertProduct = (name, price, describe, link_img, sale_id) => {\r\n  return new Promise((resolve, reject) => {\r\n    db.transaction((tx) => {\r\n      tx.executeSql(\r\n        'INSERT INTO products (name, price, describe, link_img, sale_id) VALUES (?, ?, ?, ?, ?)',\r\n        [name, price, describe, link_img, sale_id],\r\n        (_, result) => {\r\n          if (result.rowsAffected > 0) {\r\n            resolve();\r\n          } else {\r\n            reject(new Error('Insertion failed'));\r\n          }\r\n        },\r\n        (_, error) => {\r\n          console.error('Error inserting user:', error);\r\n          reject(error);\r\n        }\r\n      );\r\n    });\r\n  });\r\n};\r\n\r\nconst getAllProduct = () => {\r\n  return new Promise((resolve, reject) => {\r\n    db.transaction((tx) => {\r\n      tx.executeSql(\r\n        'SELECT * FROM products',\r\n        [],\r\n        (_, result) => {\r\n          if (result.rows.length > 0) {\r\n            const products = [];\r\n            for (let i = 0; i < result.rows.length; i++) {\r\n              const productData = result.rows.item(i);\r\n              products.push({\r\n                id: productData.id,\r\n                productName: productData.name,\r\n                describe: productData.describe,\r\n                link_img: productData.link_img,\r\n                price: productData.price,\r\n                sale_id: productData.sale_id,\r\n              });\r\n            }\r\n            resolve(products);\r\n          } else {\r\n            reject(new Error('No products found.'));\r\n          }\r\n        },\r\n        (_, error) => {\r\n          console.error('Error querying products:', error);\r\n          reject(error);\r\n        }\r\n      );\r\n    });\r\n  });\r\n};\r\n\r\nconst findProductTrue = (input) => {\r\n  return new Promise((resolve, reject) => {\r\n    db.transaction((tx) => {\r\n      tx.executeSql(\r\n        'SELECT * FROM products WHERE name LIKE ? OR describe LIKE ?',\r\n        [`%${input}%`, `%${input}%`],\r\n        (_, result) => {\r\n          if (result.rows.length > 0) {\r\n            const products = [];\r\n            for (let i = 0; i < result.rows.length; i++) {\r\n              const productData = result.rows.item(i);\r\n              products.push({\r\n                id: productData.id,\r\n                productName: productData.name,\r\n                describe: productData.describe,\r\n                link_img: productData.link_img,\r\n                price: productData.price,\r\n                sale_id: productData.sale_id,\r\n              });\r\n            }\r\n            resolve(products);\r\n          } else {\r\n            reject(new Error('No products found.'));\r\n          }\r\n        },\r\n        (_, error) => {\r\n          console.error('Error querying products:', error);\r\n          reject(error);\r\n        }\r\n      );\r\n    });\r\n  });\r\n};\r\n\r\nfunction preprocessVietnameseText(text) {\r\n  const unidecodedText = unidecode(text);\r\n  return unidecodedText.toLowerCase();\r\n}\r\n\r\nfunction levenshtein(s1, s2) {\r\n  let s1_len = s1.length;\r\n  let s2_len = s2.length;\r\n  let i, j, c, c_temp, cost;\r\n  let s1_char;\r\n  let cv0 = new Array(s2_len + 1);\r\n  let cv1 = new Array(s2_len + 1);\r\n\r\n  for (let k = 0; k <= s2_len; k++) {\r\n    cv0[k] = k;\r\n    cv1[k] = 0;\r\n  }\r\n\r\n  if (s1 === s2) {\r\n    return 0;\r\n  } else if (s1_len === 0) {\r\n    return s2_len;\r\n  } else if (s2_len === 0) {\r\n    return s1_len;\r\n  } else {\r\n    for (i = 0; i < s1_len; i++) {\r\n      s1_char = s1.charAt(i);\r\n      c = i;\r\n      cv0[0] = i + 1;\r\n\r\n      for (j = 0; j < s2_len; j++) {\r\n        cost = s1_char === s2.charAt(j) ? 0 : 1;\r\n        c_temp = cv1[j] + cost;\r\n        if (c > c_temp) {\r\n          c = c_temp;\r\n        }\r\n        c_temp = cv1[j + 1] + 1;\r\n        if (c > c_temp) {\r\n          c = c_temp;\r\n        }\r\n        cv0[j + 1] = c;\r\n      }\r\n\r\n      for (j = 0; j <= s2_len; j++) {\r\n        cv1[j] = cv0[j];\r\n      }\r\n    }\r\n  }\r\n  return c;\r\n}\r\n\r\nconst findProduct = (input, maxDistance) => {\r\n  return new Promise((resolve, reject) => {\r\n    db.transaction((tx) => {\r\n      tx.executeSql(\r\n        'SELECT * FROM products',\r\n        [],\r\n        (_, result) => {\r\n          if (result.rows.length > 0) {\r\n            if (input.length == 0) {\r\n              resolve(result);\r\n            }\r\n            const closestProducts = [];\r\n            input = preprocessVietnameseText(input);\r\n\r\n            for (let i = 0; i < result.rows.length; i++) {\r\n              const productData = result.rows.item(i);\r\n              const productName = preprocessVietnameseText(productData.name);\r\n              const productDescription = preprocessVietnameseText(productData.describe);\r\n\r\n              let distance = Math.min(levenshtein(input, productName), levenshtein(input, productDescription))\r\n              distance = Math.min(distance, levenshtein(input, productName + productDescription))\r\n\r\n              if (distance < maxDistance) {\r\n                closestProducts.push({\r\n                  id: productData.id,\r\n                  productName: productData.name,\r\n                  describe: productData.describe,\r\n                  link_img: productData.link_img,\r\n                  price: productData.price,\r\n                  sale_id: productData.sale_id,\r\n                  distance: distance\r\n                })\r\n              }\r\n            }\r\n\r\n            closestProducts.sort((a, b) => a.distance - b.distance);\r\n\r\n            resolve(closestProducts.slice(0, 10));\r\n          } else {\r\n            reject(new Error('No products found.'));\r\n          }\r\n        },\r\n        (_, error) => {\r\n          console.error('Error querying products:', error);\r\n          reject(error);\r\n        }\r\n      );\r\n    });\r\n  });\r\n};\r\n\r\nconst findProductCombined = (input) => {\r\n  const findProductTruePromise = findProductTrue(input).catch(() => null);\r\n  const findProductPromise = findProduct(input, 5).catch(() => []);\r\n\r\n  return Promise.all([findProductTruePromise, findProductPromise]).then(([trueProduct, similarProducts]) => {\r\n    if (trueProduct) {\r\n      return trueProduct;\r\n    } else {\r\n      return similarProducts.slice(0, 10);\r\n    }\r\n  });\r\n};\r\n\r\nconst getBySale = (input) => {\r\n  return new Promise((resolve, reject) => {\r\n    db.transaction((tx) => {\r\n      tx.executeSql(\r\n        'SELECT * FROM products WHERE sale_id = ?',\r\n        [input],\r\n        (_, result) => {\r\n          if (result.rows.length > 0) {\r\n            const products = [];\r\n            for (let i = 0; i < result.rows.length; i++) {\r\n              const productData = result.rows.item(i);\r\n              products.push({\r\n                id: productData.id,\r\n                productName: productData.name,\r\n                describe: productData.describe,\r\n                link_img: productData.link_img,\r\n                price: productData.price,\r\n                sale_id: productData.sale_id,\r\n              });\r\n            }\r\n            resolve(products);\r\n          } else {\r\n            resolve([]);\r\n          }\r\n        },\r\n        (_, error) => {\r\n          console.error('Error querying products:', error);\r\n          reject(error);\r\n        }\r\n      );\r\n    });\r\n  });\r\n};\r\n\r\nconst deleteProduct = (input) => {\r\n  return new Promise((resolve, reject) => {\r\n    db.transaction((tx) => {\r\n      tx.executeSql(\r\n        'SELECT * FROM products WHERE id = ?',\r\n        [input],\r\n        (_, result) => {\r\n          // TODO\r\n          resolve();\r\n        },\r\n        (_, error) => {\r\n          console.error('Error creating database:', error);\r\n          // TODO\r\n          reject(error);\r\n        }\r\n      );\r\n    });\r\n  });\r\n};\r\n\r\nconst dropTableProduct = () => {\r\n  return new Promise((resolve, reject) => {\r\n    db.transaction((tx) => {\r\n      tx.executeSql(\r\n        `DROP TABLE products`,\r\n        [],\r\n        (_, result) => {\r\n          // TODO\r\n          resolve(true);\r\n        },\r\n        (_, error) => {\r\n          console.error('Error creating database:', error);\r\n          // TODO\r\n          reject(error);\r\n        }\r\n      );\r\n    });\r\n  });\r\n};\r\n\r\nexport { createTableProduct, insertProduct, getAllProduct, findProductTrue, findProduct, findProductCombined, getBySale, deleteProduct, dropTableProduct };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}